{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState, useContext } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar UserContext = createContext();\nexport var UserProvider = function UserProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    idCard = _useState2[0],\n    setIdCard = _useState2[1];\n  return _jsx(UserContext.Provider, {\n    value: {\n      idCard: idCard,\n      setIdCard: setIdCard\n    },\n    children: children\n  });\n};\nexport var useUser = function useUser() {\n  return useContext(UserContext);\n};","map":{"version":3,"names":["React","createContext","useState","useContext","jsx","_jsx","UserContext","UserProvider","_ref","children","_useState","_useState2","_slicedToArray","idCard","setIdCard","Provider","value","useUser"],"sources":["C:/Users/user/Desktop/iotproj/Screens/Components/UserContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from \"react\";\n\n// Create a Context\nconst UserContext = createContext();\n\n// Create a Provider Component\nexport const UserProvider = ({ children }) => {\n  const [idCard, setIdCard] = useState(\"\");\n\n  return (\n    <UserContext.Provider value={{ idCard, setIdCard }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\n// Create a custom hook for easy context usage\nexport const useUser = () => useContext(UserContext);\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAGnE,IAAMC,WAAW,GAAGL,aAAa,CAAC,CAAC;AAGnC,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAYA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EACrC,IAAAC,SAAA,GAA4BR,QAAQ,CAAC,EAAE,CAAC;IAAAS,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAjCG,MAAM,GAAAF,UAAA;IAAEG,SAAS,GAAAH,UAAA;EAExB,OACEN,IAAA,CAACC,WAAW,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEH,MAAM,EAANA,MAAM;MAAEC,SAAS,EAATA;IAAU,CAAE;IAAAL,QAAA,EAChDA;EAAQ,CACW,CAAC;AAE3B,CAAC;AAGD,OAAO,IAAMQ,OAAO,GAAG,SAAVA,OAAOA,CAAA;EAAA,OAASd,UAAU,CAACG,WAAW,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}